# This file provides some useful git config settings. Copy the bits you want into ~/.gitconfig.
# Alternatively, include this file in your ~/.gitconfig file as follows:
# 
# [include]
# path = /path/to/git/gitconfig

[http]
sslverify = true

[color]
# Switch colour on.
    ui = true

# Aliases
[alias]
# Print out a nice ascii graph of the branches with commit comments, and refs shown.
    graph = log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

    logx = log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

# log/diff the commits you are ahead of the remote (Note the @{u} points to the upstream branch HEAD is what you currently have checked out):
    logahead = log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' @{u}..HEAD
    diffahead = diff @{u}..HEAD
# Show files to be affected by a merge into the remote.
    filesahead = !bash -c 'git log --pretty=format: --name-only @{u}..HEAD | grep "[a-zA-Z]" | sort | uniq'

# log/diff the commits you are behind the remote (use git fetch since pull will automatically merge these commits in):
    logbehind = log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' HEAD..@{u}
    diffbehind = diff HEAD..@{u}
# Show files affected by a merge from the remote.
    filesbehind = !bash -c 'git log --pretty=format: --name-only HEAD..@{u} | grep "[a-zA-Z]" | sort | uniq'

# Example command shortcuts:
    com = commit -am
#    co = checkout
    f = fetch
    m = merge
    sp = show --pretty=oneline

# Git Flow convenience commands:
    # Performs the init with defaults, and sets the upstream develop branch.
    flowinit = !git flow init -d && git co develop && git branch --set-upstream-to origin/develop
    # Pushes to both master and develop and also pushes tags.
    flowpush = !git co master && git push origin master && git push origin master --tags && git co develop && git push origin develop
    tags = tag -l --sort=version:refname

# Set up git flow globally
[gitflow "branch"]
	master = master
	develop = develop
[gitflow "prefix"]
	feature = feature/
	release = release/
	hotfix = hotfix/
	support = support/
	versiontag = 

